# frozen_string_literal: true

require 'nokogiri'
require 'open-uri'
require_relative 'source_code'

# This class takes in a url and scans for the website's file structure
# The file structure scan scans a website for all accessible pages
class FileStructure < ComprehensiveScan
  attr_reader :file_structure

  def initialize(url)
    @url = url
    @file_structure = {}
    scan_website
  end

  def scan_website # rubocop:disable Metrics/AbcSize,Metrics/MethodLength
    puts 'Scanning website'
    # Fetch and parse HTML document
    doc = Nokogiri::HTML(URI.open(@url)) # rubocop:disable Security/Open
    num_of_links = 0

    # Find all links on the page
    doc.css('a').each do |link|
      href = link['href']
      next unless href&.start_with?('http')

      # Fetch the content of the linked page
      page_content = URI.open(href).read # rubocop:disable Security/Open
      path = URI.parse(href).path
      puts path.colorize(:green)
      puts "adding #{path} to file structure #{num_of_links}"
      num_of_links += 1
      SourceCode.new(path, page_content)
      add_to_structure(path)
    end
  end

  def add_to_structure(path)
    parts = path.split('/').reject(&:empty?)
    current = @file_structure

    parts.each_with_index do |part, index|
      if index == parts.size - 1
        current[part] = part
      else
        current[part] ||= {}
        current = current[part]
      end
    end
  end

  def print_tree(structure = @file_structure, indent = '', last = true)
    structure.each_with_index do |(key, value), index|
      is_last = index == structure.size - 1
      connector = last ? '└── ' : '├── '
      puts "#{indent}#{connector}#{key}"

      if value.is_a?(Hash)
        new_indent = last ? '    ' : '│   '
        print_tree(value, indent + new_indent, is_last)
      end
    end
  end
end
