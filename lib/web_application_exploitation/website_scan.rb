# frozen_string_literal: true

require 'tty-prompt'
require 'open-uri'
require 'nokogiri'
require_relative 'comprehensive_scan'
require_relative 'web_application_exploitation_ascii_art'

# This class displays the menu and houses the functions for the website scan
# The website scan scans a website for all accessible pages
class WebsiteScan < ComprehensiveScan
  def initialize(*url, solo: true)
    WebApplicationExploitationAsciiArt.new('website')
    @url = solo ? obtain_url : url.first
    @keywords = []
    select_website_scan_mode
  end

  def select_website_scan_mode # rubocop:disable Metrics/AbcSize,Metrics/MethodLength,Metrics/CyclomaticComplexity
    prompt = TTY::Prompt.new

    choices = [
      { name: 'All searches', value: 1 },
      { name: 'Supply keywords', value: 2 },
      { name: 'Change website', value: 3 },
      { name: 'Search comments', value: 4 },
      { name: 'Find directories', value: 5 },
      { name: 'Go to previosu menu', value: 'previous' },
      { name: 'Go to Main Menu', value: 'main' },
      { name: 'Quit application', value: 'quit' }
    ]

    mode = prompt.select('Please select a mode', choices, per_page: 8, cycle: true)

    case mode
    when 1
      WebApplicationExploitationAsciiArt.new('website')
      search_comments
      find_directories
    when 2
      WebApplicationExploitationAsciiArt.new('website')
      select_keywords
    when 3
      WebApplicationExploitationAsciiArt.new('website')
      obtain_url
    when 4
      WebApplicationExploitationAsciiArt.new('website')
      search_comments
    when 5
      WebApplicationExploitationAsciiArt.new('website')
      find_directories
    when 'previous'
      WebApplicationExploitation.new
    when 'main'
      Toolbox.new
    when 'quit'
      clear_terminal
      exit
    end
  end

  def select_keywords(solo: true)
    @keywords = []
    puts 'Please enter keywords you want to search for, case sensitive, seperated by a space.'
    @keywords = gets.chomp.split(' ')

    return unless solo

    quit_or_continue(WebsiteScan)
  end

  def fetch_html_content(url)
    URI.open(url).read
  end

  def search_comments
    if @keywords.empty?
      puts 'You need to select keywords to search for'
      select_keywords(false)
    end

    html_content = fetch_html_content(@url)
    doc = Nokogiri::HTML(html_content)

    comments = doc.css('.comment') # Adjust the CSS selector to match the structure of the website
    matching_comments = comments.select do |comment|
      @keywords.any? { |keyword| comment.text.include?(keyword) }
    end

    matching_comments.each do |comment|
      puts comment.text.strip
    end
    quit_or_continue(WebsiteScan)
  end

  def find_directories
  end
end
